buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "$mod_majormod.$mod_majorapi.$mod_minor.$mod_patch"

if(release_type != "") {
    version = "$version-$release_type"
}

group = mod_group
archivesBaseName = mod_base_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20200514-1.16'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.1-32.0.66'

}

processResources {
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"

        expand "version": project.version
    }

    from(sourceSets.main.resources) {
        exclude "META-INF/mods.toml"
    }
}

def env = System.getenv()
if(env.BUILD_NUMBER) {
    version = version + "-b${env.BUILD_NUMBER}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "chain-resources",
                "Specification-Vendor"    : "Korti",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Korti",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task apiJar(type: Jar, dependsOn: classes) {
    classifier = 'api'
    from(sourceSets.main.output) {
        include 'io/korti/chainresources/api/**'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact jar
            artifact sourcesJar
            artifact deobfJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            name "GitHub Packages"
            url "https://maven.pkg.github.com/korti11"
            credentials {
                username = env.GITHUB_CREDS_USR
                password = env.GITHUB_CREDS_PSW
            }
        }
    }
}